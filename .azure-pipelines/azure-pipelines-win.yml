# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

jobs:
- job: win
  pool:
    vmImage: vs2017-win2016
  strategy:
    matrix:
      win_64_:
        CONFIG: win_64_
        UPLOAD_PACKAGES: 'True'
    maxParallel: 4
  timeoutInMinutes: 360
  variables:
    CONDA_BLD_PATH: D:\\bld\\
    CONDA: D:\\conda\\

  steps:
    - script: |
        choco install vcpython27 -fdv -y --debug
      condition: contains(variables['CONFIG'], 'vs2008')
      displayName: Install vcpython27.msi (if needed)

    # Cygwin's git breaks conda-build. (See https://github.com/conda-forge/conda-smithy-feedstock/pull/2.)
    # - script: rmdir C:\cygwin /s /q
    #   continueOnError: true

    - powershell: |
        Set-PSDebug -Trace 1

        $batchcontent = @"
        ECHO ON
        SET vcpython=C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0

        DIR "%vcpython%"

        CALL "%vcpython%\vcvarsall.bat" %*
        "@

        $batchDir = "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC"
        $batchPath = "$batchDir" + "\vcvarsall.bat"
        New-Item -Path $batchPath -ItemType "file" -Force

        Set-Content -Value $batchcontent -Path $batchPath

        Get-ChildItem -Path $batchDir

        Get-ChildItem -Path ($batchDir + '\..')

      condition: contains(variables['CONFIG'], 'vs2008')
      displayName: Patch vs2008 (if needed)

    - script: |
        pip install ensureconda

    - task: PythonScript@0
      inputs:
        scriptSource: 'inline'
        script: |
          from urllib.request import urlretrieve
          import subprocess

          urlretrieve(
            'https://raw.githubusercontent.com/conda-forge/conda-forge-lockfiles/master/environments/conda-forge-build/conda-win-64.lock',
            'conda.lock'
          )

          # provision micromamba
          # micromamba doesn't install explicit deps yet
          # exe = subprocess.check_output(['ensureconda', '--no-conda', '--no-conda-exe']).strip().decode()
          # print("Found conda at", exe)

          exe = subprocess.check_output(['ensureconda', '--no-micromamba']).strip().decode()

          subprocess.check_call([
            exe, 'create', '-p', 'D:\\conda', '--yes', '--file', 'conda.lock'
          ])
          print("Created base environment", exe)


    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH


    - script: set PYTHONUNBUFFERED=1
      displayName: Set PYTHONUNBUFFERED

    # Configure the VM
    - script: |
        call activate base
        setup_conda_rc .\ ".\recipe" .\.ci_support\%CONFIG%.yaml
      displayName: conda-forge CI setup

    # Configure the VM.
    - script: |
        set "CI=azure"
        call activate base
        run_conda_forge_build_setup
      displayName: conda-forge build setup
    

    # Special cased version setting some more things!
    - script: |
        call activate base
        conda.exe build "recipe" -m .ci_support\%CONFIG%.yaml
      displayName: Build recipe (vs2008)
      env:
        VS90COMNTOOLS: "C:\\Program Files (x86)\\Common Files\\Microsoft\\Visual C++ for Python\\9.0\\VC\\bin"
        PYTHONUNBUFFERED: 1
      condition: contains(variables['CONFIG'], 'vs2008')

    - script: |
        call activate base
        conda.exe build "recipe" -m .ci_support\%CONFIG%.yaml
      displayName: Build recipe
      env:
        PYTHONUNBUFFERED: 1
      condition: not(contains(variables['CONFIG'], 'vs2008'))
    - script: |
        set "FEEDSTOCK_NAME=%BUILD_REPOSITORY_NAME:*/=%"
        call activate base
        validate_recipe_outputs "%FEEDSTOCK_NAME%"
      displayName: Validate Recipe Outputs

    - script: |
        set "GIT_BRANCH=%BUILD_SOURCEBRANCHNAME%"
        set "FEEDSTOCK_NAME=%BUILD_REPOSITORY_NAME:*/=%"
        call activate base
        upload_package --validate --feedstock-name="%FEEDSTOCK_NAME%" .\ ".\recipe" .ci_support\%CONFIG%.yaml
      displayName: Upload package
      env:
        BINSTAR_TOKEN: $(BINSTAR_TOKEN)
        FEEDSTOCK_TOKEN: $(FEEDSTOCK_TOKEN)
        STAGING_BINSTAR_TOKEN: $(STAGING_BINSTAR_TOKEN)
      condition: and(succeeded(), not(eq(variables['UPLOAD_PACKAGES'], 'False')))